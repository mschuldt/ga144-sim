( save words to sram then read them back and print them

( 708 - async, print all words it receives from south port
( 106 - for n from 1 to 10 write sram[n] = 2*n
(       for n from 1 to 15 read sram[n], sent to node 708
( 107,7,8,9 - sram control
( 608...206 - wire nodes for sending data from sram to async port

( run with:
(     ./ga-load examples/sram-demo.aforth /dev/ttyUSB0
( Exected output:
(    0
(    2
(    4
(    6
(    8
(    10
(    12
(    14
(    16
(    18
(    20
(    ...
(    ...
(    ...
(    ...
(    ...
(    [exit]
( Where ... are random numbers



( (   block 278:
(     example code for memory master nodes.
(     memory-access words assume that addresses and
(     data are 16-bit parameters with the upper two
(     bits zero and pages are 4-bits with the upper
(     14 bits zero. p.a is thus a 20-bit address.
(
(     ex@ a p - w fetch w from p.a
(     ex! w a p store w at p.a
(     mk! w f -0 set masks from w per f.
(     cx? w a p n - f comp-and-exch
(
(     cx? compares value at p.a to n. if same, write
(     s w to p.a and returns true. otherwise, only
(     returns false. x@ and x! are 16-bit versions to
(     access the lowest 64k of available memory.
(
(     mk! sets mask from w when f is 0;
(     posts stimuli when f is 1.                        )
( - user )node 106 ( node 106, 108, or 207.)
: x! ( wa) ( 39) dup dup or
: ex! ( wap) : mk! ( mfp') ( 3A) - !b - !b !b ;
: x@ ( a-w) ( 3C) dup dup or
: ex@ ( ap-w) ( 3D) !b !b @b ;
: cx? ( wapn-f) ( 3E) - !b !b !b !b @b ; ( 40)
: main
north a! east b!
0 10 for dup dup . + over  x! 1 . + next
0 15 for dup dup  x@ ! 1 . + next
warm


include sram.aforth
include sram-minimal-master.aforth


node 708
include 708serial.aforth
: main
io b! south a!
15 for @ out18 next
exit warm ;


node 608 : main north b! south a! : loop @ !b loop ;
node 508 : main north b! south a! : loop @ !b loop ;
node 408 : main north b! south a! : loop @ !b loop ;
node 308 : main north b! west a! : loop @ !b loop ;
node 307 : main west a! east b! : loop @ !b loop ;
node 306 : main south a! east b!  : loop @ !b loop ;
node 206 : main south a! north b! : loop @ !b loop ;
