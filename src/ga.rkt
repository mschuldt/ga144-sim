#lang racket ;; -*- lexical-binding: t -*-

(require compatibility/defmacro
         "compiler/compile.rkt"
         "el.rkt")

(provide (all-defined-out))

(define ret 'ret)
(define ex 'ex)
(define jump 'jump)
(define call 'call)
(define unext 'unext)
(define next 'next)
;(define if 'if)
(define -if '-f)
(define @p '@p)
(define @+ '@+)
(define @b '@b)
(define @ '@)
(define !p '!p)
(define !b '!b)
(define ! '!)
(define +* '+*)
(define 2* '2*)
(define 2/ '2/)
;;(define - '-)
;;(define + '+)
(define and 'and)
(define or 'or)
;;(define drop 'drop)
(define dup 'dup)
(define pop 'pop)
(define over 'over)
(define a 'a)
(define nop 'nop)
(define push 'push)
(define b! 'b!)
(define a! 'a!)

(define io 'io)
(define north 'north)
(define east 'east)
(define south 'south)
(define west 'west)
(define up 'up)
(define down 'down)
(define left 'left)
(define right 'right)

;;(define for 'for) ;X

(define op-replacements (make-hash '(("ret" . ";")
                                     ("nop" . "."))))
(struct GA144 (name nodes)  #:mutable #:transparent)
(struct Node (coord words)  #:mutable #:transparent)
(struct Word (name body)  #:mutable #:transparent)

(define current-node-list false)
(define (set-current-node-list! x) (set! current-node-list x))
(define (get-current-node-list) current-node-list)
(define (current-node-list-add! x)
  (set! current-node-list (cons x current-node-list)))

(define chips (list))
(define (add-chip chip) (set! chips (cons chip chips)))
(define (get-chips) chips)

(define current-word-list false)
(define (set-current-word-list! x) (set! current-word-list x))
(define (get-current-word-list) current-word-list)
(define (current-word-list-add! x)
  (set! current-word-list (cons x current-word-list)))

(define-syntax-rule (chip name nodes ...)
  (begin (define name (GA144 (symbol->string 'name) false))
         (add-chip name)
         (set-current-node-list! (list))
         nodes ...
         (set-GA144-nodes! name (reverse (get-current-node-list)))
         (set-current-node-list! false)))

(define-syntax-rule (node coord words ...)
  (begin (set-current-word-list! (list))
         words ...
         (current-node-list-add! (Node coord (reverse (get-current-word-list))))
         (set-current-word-list! false)))

(define-syntax-rule (: name inst ...)
  (begin (define name (quote name))
         (create-word (symbol->string name) (list inst ...))))

(define (create-word name instructions)
  (current-word-list-add!
   (Word name
         (for/list ((inst instructions))
           (let ((s (cond ((symbol? inst)
                           (symbol->string inst))
                          ;;else: numbers
                          (else inst))))
             (if (hash-has-key? op-replacements s)
                 (hash-ref op-replacements s)
                 s)))
         )))

(struct Comment (text))

(define-syntax-rule (c text ...)
  (Comment (string-join (for/list ((x (quote (text ...))))
                          (if (equal? x 'nl)
                              "\n"
                              (rkt-format "~a" x)))
                        " ")))

(define (write-aforth-file (chip false) [name "out.aforth"])
  (with-output-to-file name
    (lambda ()
      (printf "( autogenerated code ***do not edit*** chip=~a )\n"
              (GA144-name chip))
      (for ((n (GA144-nodes chip)))
        (printf "\nnode ~a\n" (Node-coord n))
        (for ((word (Node-words n)))
          (printf ": ~a\n" (Word-name word))
          (for ((inst (Word-body word)))
            (printf "~a " inst))
          (printf "\n"))))
    #:exists 'replace))
